"use strict";(self.webpackChunkthe_codex_docusaurus=self.webpackChunkthe_codex_docusaurus||[]).push([[982],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(a),m=r,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||i;return a?n.createElement(f,o(o({ref:t},u),{},{components:a})):n.createElement(f,o({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5234:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const i={},o="Gu\xeda de testing en front",s={unversionedId:"guia-frontend/testing/testing-guide",id:"guia-frontend/testing/testing-guide",title:"Gu\xeda de testing en front",description:"Para testear nuestras aplicaciones frontend (web y m\xf3vil) usamos una serie de librer\xedas externas que cumplen variadas funciones. Algunas de las principales son:",source:"@site/docs/guia-frontend/testing/testing-guide.md",sourceDirName:"guia-frontend/testing",slug:"/guia-frontend/testing/testing-guide",permalink:"/the-codex/guia-frontend/testing/testing-guide",draft:!1,editUrl:"https://github.com/budacom/the-codex/edit/master/docs/guia-frontend/testing/testing-guide.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Mocks de API calls con MSW",permalink:"/the-codex/guia-frontend/testing/api-mocks"}},l={},c=[],u={toc:c};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"gu\xeda-de-testing-en-front"},"Gu\xeda de testing en front"),(0,r.kt)("p",null,"Para testear nuestras aplicaciones frontend (web y m\xf3vil) usamos una serie de librer\xedas externas que cumplen variadas funciones. Algunas de las principales son:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://jestjs.io/"},"Jest"),": un framework de testing para aplicaciones en JS. A grandes rasgos hace lo mismo que hace ",(0,r.kt)("a",{parentName:"li",href:"https://rspec.info/"},"RSpec")," en el backend. Nos ayuda a:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Estructurar nuestros casos de test usando ",(0,r.kt)("inlineCode",{parentName:"li"},"it")," y ",(0,r.kt)("inlineCode",{parentName:"li"},"describe"),"."),(0,r.kt)("li",{parentName:"ul"},"Configurar las condiciones necesarias para cada test usando funciones como ",(0,r.kt)("inlineCode",{parentName:"li"},"beforeEach"),"."),(0,r.kt)("li",{parentName:"ul"},"Evaluar cada caso de test usando ",(0,r.kt)("inlineCode",{parentName:"li"},"expect"),"."),(0,r.kt)("li",{parentName:"ul"},"Hacer mocks de dependencias usando ",(0,r.kt)("inlineCode",{parentName:"li"},"jest.mock"),"."),(0,r.kt)("li",{parentName:"ul"},"Crear tests de snapshots."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://testing-library.com/docs/react-testing-library/intro/"},"React Testing Library")," (",(0,r.kt)("inlineCode",{parentName:"li"},"@testing-library/react"),"): una librer\xeda hecha espec\xedficamente para testear componentes React. Es parte de ",(0,r.kt)("a",{parentName:"li",href:"https://testing-library.com/"},"Testing Library"),", un conjunto de librer\xedas para testear componentes UI de una variedad de frameworks. Te recomendamos revisar la documentaci\xf3n de ambas. Esta librer\xeda nos ayuda a:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Renderizar nuestro componente dentro del test usando ",(0,r.kt)("inlineCode",{parentName:"li"},"render"),", y luego encontrar elementos visuales (por ejemplo para probar que existen) usando queries como ",(0,r.kt)("inlineCode",{parentName:"li"},"getByText"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"findByTestId"),", etc."),(0,r.kt)("li",{parentName:"ul"},"Interactuar con los componentes dentro del test usando funciones como ",(0,r.kt)("inlineCode",{parentName:"li"},"fireEvent.click"),"."),(0,r.kt)("li",{parentName:"ul"},"Esperar a que se cumplan condiciones as\xedncronas con ",(0,r.kt)("inlineCode",{parentName:"li"},"waitFor"),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://callstack.github.io/react-native-testing-library/"},"React Native Testing Library")," (",(0,r.kt)("inlineCode",{parentName:"li"},"@testing-library/react-native"),"): una librer\xeda hecha espec\xedficamente para testear componentes en React Native. Si bien no es parte de Testing Library, est\xe1 basada en \xe9sta y cumple una funci\xf3n muy similar. Se usa en la app m\xf3vil."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://react-hooks-testing-library.com/"},"React Hooks Testing Library")," (",(0,r.kt)("inlineCode",{parentName:"li"},"@testing-library/react-hooks"),"): una librer\xeda hecha espec\xedficamente para testear hooks (no componentes) de React. Nos ayuda a:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Instanciar hooks con ",(0,r.kt)("inlineCode",{parentName:"li"},"renderHook")," y luego acceder a su valor retornado usando ",(0,r.kt)("inlineCode",{parentName:"li"},".result")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://mswjs.io/"},"MSW"),": una librer\xeda para hacer mocks de requests tanto en ambiente de test como desarrollo, pudiendo definir su contenido y replicando condiciones reales como la latencia de respuesta. Para aprender m\xe1s puedes ir a la gu\xeda ",(0,r.kt)("a",{parentName:"li",href:"api-mocks"},"Mocks de API calls con MSW"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/thoughtbot/fishery"},"Fishery"),": una librer\xeda para generar objetos para mocks. A grandes rasgos hace lo mismo que hace ",(0,r.kt)("inlineCode",{parentName:"li"},"factory_bot")," en el backend. Nos ayuda a:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Definir una factory con ",(0,r.kt)("inlineCode",{parentName:"li"},"Factory.define"),". Luego con la factory retornada usamos ",(0,r.kt)("inlineCode",{parentName:"li"},".build")," para crear una instancia.")))))}p.isMDXComponent=!0}}]);