"use strict";(self.webpackChunkthe_codex_docusaurus=self.webpackChunkthe_codex_docusaurus||[]).push([[968],{3905:(e,n,a)=>{a.d(n,{Zo:()=>p,kt:()=>d});var t=a(7294);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var c=t.createContext({}),l=function(e){var n=t.useContext(c),a=n;return e&&(a="function"==typeof e?e(n):s(s({},n),e)),a},p=function(e){var n=l(e.components);return t.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(a),d=o,k=u["".concat(c,".").concat(d)]||u[d]||m[d]||r;return a?t.createElement(k,s(s({ref:n},p),{},{components:a})):t.createElement(k,s({ref:n},p))}));function d(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=a.length,s=new Array(r);s[0]=u;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<r;l++)s[l]=a[l];return t.createElement.apply(null,s)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},1106:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var t=a(7462),o=(a(7294),a(3905));const r={sidebar_position:3},s="Nombres de archivos, variables, etc.",i={unversionedId:"guia-frontend/code/naming",id:"guia-frontend/code/naming",title:"Nombres de archivos, variables, etc.",description:"Convenciones para nombres de archivos, constantes, variables, funciones, carpetas, etc.",source:"@site/docs/guia-frontend/code/naming.md",sourceDirName:"guia-frontend/code",slug:"/guia-frontend/code/naming",permalink:"/the-codex/guia-frontend/code/naming",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Hooks de React",permalink:"/the-codex/guia-frontend/code/hooks"},next:{title:"Uso de props spreading",permalink:"/the-codex/guia-frontend/code/props-spreading"}},c={},l=[{value:"Usar PascalCase en componentes e interfaces",id:"usar-pascalcase-en-componentes-e-interfaces",level:2},{value:"Usar camelCase para variables, objetos, funciones, etc.",id:"usar-camelcase-para-variables-objetos-funciones-etc",level:2},{value:"Consideraciones con las funciones",id:"consideraciones-con-las-funciones",level:3},{value:"Usar snake_case en may\xfasculas para constantes que exportamos",id:"usar-snake_case-en-may\xfasculas-para-constantes-que-exportamos",level:2}],p={toc:l};function m(e){let{components:n,...a}=e;return(0,o.kt)("wrapper",(0,t.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"nombres-de-archivos-variables-etc"},"Nombres de archivos, variables, etc."),(0,o.kt)("p",null,"Convenciones para nombres de archivos, constantes, variables, funciones, carpetas, etc."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Para mantener el est\xe1ndar en el nombre de los archivos frontend de nuestros proyectos, utilizamos la\nconvenci\xf3n de nombrar los archivos como lo que se est\xe1 exportando.")),(0,o.kt)("h2",{id:"usar-pascalcase-en-componentes-e-interfaces"},"Usar PascalCase en componentes e interfaces"),(0,o.kt)("p",null,"Componentes de React e interfaces de TypeScript los nombraremos utilizando ",(0,o.kt)("inlineCode",{parentName:"p"},"PascalCase"),", y sus archivos tambi\xe9n\nlos nombraremos de la misma forma."),(0,o.kt)("p",null,"Un ejemplo es el componente ",(0,o.kt)("inlineCode",{parentName:"p"},"<Button />"),", que su archivo se nombra de la misma forma usando ",(0,o.kt)("inlineCode",{parentName:"p"},"PascalCase"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"Button.tsx"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Button.tsx"',title:'"Button.tsx"'},"export const Button = ({ onClick }) => {\n  // insert code here\n};\n")),(0,o.kt)("p",null,"En el caso de un componente que est\xe9 organizado en dos o m\xe1s archivos, lo nombramos de la siguiente forma:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"shared\n\u2514\u2500\u2500 components\n    \u2514\u2500\u2500 FormikCurrencyInput\n        \u251c\u2500\u2500 index.tsx\n        \u2514\u2500\u2500 getFormatSeparators.ts\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"S\xf3lo para el caso de componentes que est\xe1n organizados en diferentes archivos, nombramos su carpeta en\n",(0,o.kt)("inlineCode",{parentName:"p"},"PascalCase")," y su archivo principal ",(0,o.kt)("inlineCode",{parentName:"p"},"index.tsx"),", porque exportamos el mismo nombre de la carpeta.")),(0,o.kt)("p",null,"Y en el caso de una interface, por ejemplo ",(0,o.kt)("inlineCode",{parentName:"p"},"Item"),", que su archivo se nombra de la misma forma usando ",(0,o.kt)("inlineCode",{parentName:"p"},"PascalCase"),":\n",(0,o.kt)("inlineCode",{parentName:"p"},"Item.ts"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Item.ts"',title:'"Item.ts"'},"interface Item {\n  id: number;\n  name: string;\n  value: string;\n}\n")),(0,o.kt)("h2",{id:"usar-camelcase-para-variables-objetos-funciones-etc"},"Usar camelCase para variables, objetos, funciones, etc."),(0,o.kt)("p",null,"Variables, constantes, arrays, objetos, hooks de React y otras funciones los nombraremos usando ",(0,o.kt)("inlineCode",{parentName:"p"},"camelCase"),". Para el caso\nparticular de hooks de React y otras funciones que exportemos, sus archivos tambi\xe9n los nombraremos en ",(0,o.kt)("inlineCode",{parentName:"p"},"camelCase"),"."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"En el caso particular de los hooks, estos deben comenzar con el prefijo ",(0,o.kt)("inlineCode",{parentName:"p"},"use"),", donde su archivo se nombra de la forma\n",(0,o.kt)("inlineCode",{parentName:"p"},"use<Action><Resource>"),". Por ejemplo: ",(0,o.kt)("inlineCode",{parentName:"p"},"useFetchTransactions.ts"),". En el caso particular de las queries, ",(0,o.kt)("inlineCode",{parentName:"p"},"Action"),"\ncorresponde a un nombre descriptivo de lo que hace la llamada a la API (fetch, create, delete, update, cancel, etc.),\nno al verbo HTTP.")),(0,o.kt)("p",null,"Un ejemplo de funci\xf3n es ",(0,o.kt)("inlineCode",{parentName:"p"},"getFormatSeparators")," del componente ",(0,o.kt)("inlineCode",{parentName:"p"},"<FormikCurrencyInput />"),", que su archivo se nombra\nde la misma forma usando ",(0,o.kt)("inlineCode",{parentName:"p"},"camelCase"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"getFormatSeparators.ts"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="getFormatSeparators.ts"',title:'"getFormatSeparators.ts"'},"export const getFormatSeparators = ({ locale, currency }) => {\n  // insert code here\n};\n")),(0,o.kt)("p",null,"El mismo caso aplica para un hook, por ejemplo ",(0,o.kt)("inlineCode",{parentName:"p"},"useFetchTransactions.ts"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="useFetchTransactions.ts"',title:'"useFetchTransactions.ts"'},"export const useFetchTransactions = () => {\n  // insert code here\n};\n")),(0,o.kt)("h3",{id:"consideraciones-con-las-funciones"},"Consideraciones con las funciones"),(0,o.kt)("p",null,"Para el caso particular de las funciones se recomienda nombrarlas con un verbo descriptivo, es decir, que explique qu\xe9 es\nlo que hace la funci\xf3n."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Podemos escribir el nombre de una funci\xf3n un poco m\xe1s largo si nos ayuda a tener nombres m\xe1s descriptivos, asegurando que coincida\ncon lo que hace la funci\xf3n."),(0,o.kt)("p",{parentName:"admonition"},"Por ejemplo, en vez de ",(0,o.kt)("strong",{parentName:"p"},"initAuth")," preferir ",(0,o.kt)("inlineCode",{parentName:"p"},"initializeAuthentication")," o ",(0,o.kt)("inlineCode",{parentName:"p"},"initiateAuthorization"),".")),(0,o.kt)("p",null,"Algunos ejemplos ya los hemos mencionado m\xe1s arriba, tales como:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const useFetchTransactions = () => {\n  // se compone del verbo descriptivo `FetchTransactions` y el prefijo `use` (tambi\xe9n un verbo).\n};\n\nconst getFormatSeparators = () => {\n  // insert code here\n};\n")),(0,o.kt)("p",null,"Estas consideraciones son aplicables tambi\xe9n con las funciones gatilladas por eventos de un componente, tales como ",(0,o.kt)("inlineCode",{parentName:"p"},"onClick"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"onKeyDown"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"onBlur"),", etc. Por ejemplo, para la prop ",(0,o.kt)("inlineCode",{parentName:"p"},"onClick")," de un componente ",(0,o.kt)("inlineCode",{parentName:"p"},"<Button />")," que env\xeda el contenido de un\nformulario, le asignamos la funci\xf3n con un verbo descriptivo como nombre:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"<Button onClick={submitForm} />\n")),(0,o.kt)("h2",{id:"usar-snake_case-en-may\xfasculas-para-constantes-que-exportamos"},"Usar snake_case en may\xfasculas para constantes que exportamos"),(0,o.kt)("p",null,"Constantes que exportaremos las nombraremos usando ",(0,o.kt)("inlineCode",{parentName:"p"},"snake_case")," en may\xfasculas."),(0,o.kt)("p",null,"Un ejemplo de constante a exportar es ",(0,o.kt)("inlineCode",{parentName:"p"},"MAX_TERMS")," utilizada en cr\xe9ditos, para representar el n\xfamero m\xe1ximo de meses\nal momento de solicitar un cr\xe9dito. Esto, mientras a\xfan no obtenemos el valor mediante API."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export const MAX_TERMS = 12;\nexport const MAXIMUM_AMOUNT = 30_000_000;\n")),(0,o.kt)("p",null,"o"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const MAX_TERMS = 12;\nconst MAXIMUM_AMOUNT = 30_000_000;\n\nexport { MAX_TERMS, CREDITOR_ACCOUNT_FEE };\n")),(0,o.kt)("p",null,"Para este caso, no es necesario nombrar el archivo en ",(0,o.kt)("inlineCode",{parentName:"p"},"snake_case")," sino que lo nombramos en ",(0,o.kt)("inlineCode",{parentName:"p"},"camelCase"),", al igual que los\narchivos para variables, objetos, funciones, etc. Por ejemplo: ",(0,o.kt)("inlineCode",{parentName:"p"},"loanConstants.ts"),"."))}m.isMDXComponent=!0}}]);