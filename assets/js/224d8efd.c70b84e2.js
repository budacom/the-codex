"use strict";(self.webpackChunkthe_codex_docusaurus=self.webpackChunkthe_codex_docusaurus||[]).push([[535],{3905:(e,n,a)=>{a.d(n,{Zo:()=>c,kt:()=>m});var t=a(7294);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var p=t.createContext({}),l=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},c=function(e){var n=l(e.components);return t.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var a=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(a),m=o,g=d["".concat(p,".").concat(m)]||d[m]||u[m]||r;return a?t.createElement(g,i(i({ref:n},c),{},{components:a})):t.createElement(g,i({ref:n},c))}));function m(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=d;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<r;l++)i[l]=a[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}d.displayName="MDXCreateElement"},95:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var t=a(7462),o=(a(7294),a(3905));const r={sidebar_position:1},i="Typescript",s={unversionedId:"guia-frontend/code/typescript",id:"guia-frontend/code/typescript",title:"Typescript",description:"Typescript es un lenguaje de programaci\xf3n, superconjunto de JavaScript.",source:"@site/docs/guia-frontend/code/typescript.md",sourceDirName:"guia-frontend/code",slug:"/guia-frontend/code/typescript",permalink:"/the-codex/guia-frontend/code/typescript",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Queries y calls",permalink:"/the-codex/guia-frontend/code/queries"},next:{title:"Hooks de React",permalink:"/the-codex/guia-frontend/code/hooks"}},p={},l=[{value:"Definici\xf3n de tipos",id:"definici\xf3n-de-tipos",level:2},{value:"Tipos para librer\xedas de terceros",id:"tipos-para-librer\xedas-de-terceros",level:3},{value:"Tipos para los argumentos de una funci\xf3n",id:"tipos-para-los-argumentos-de-una-funci\xf3n",level:3},{value:"En linea:",id:"en-linea",level:4},{value:"<em>Interfaces</em>:",id:"interfaces",level:4},{value:"Tipos al usar el hook <code>useState</code>",id:"tipos-al-usar-el-hook-usestate",level:3},{value:"Tipo de un evento",id:"tipo-de-un-evento",level:3},{value:"Tipo de datos gen\xe9rico",id:"tipo-de-datos-gen\xe9rico",level:3},{value:"Cambiar la key de un objeto tipado",id:"cambiar-la-key-de-un-objeto-tipado",level:3},{value:"Otras consideraciones",id:"otras-consideraciones",level:2},{value:"Organizaci\xf3n de <em>interfaces</em>",id:"organizaci\xf3n-de-interfaces",level:3},{value:"Configuraci\xf3n",id:"configuraci\xf3n",level:2},{value:"Mas informaci\xf3n",id:"mas-informaci\xf3n",level:2}],c={toc:l};function u(e){let{components:n,...a}=e;return(0,o.kt)("wrapper",(0,t.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"typescript"},"Typescript"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/"},"Typescript")," es un lenguaje de programaci\xf3n, superconjunto de JavaScript. "),(0,o.kt)("p",null,"Su principal caracter\xedstica sobre javascript, es que a\xf1ade tipado est\xe1tico, lo que significa que toda variable es de un tipo espec\xedfico. Algunos de los tipos mas usados son ",(0,o.kt)("inlineCode",{parentName:"p"},"number"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"string")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"boolean"),". "),(0,o.kt)("p",null,"En esta gu\xeda exploraremos algunas consideraciones a tener en cuenta al momento de programar en este lenguaje. "),(0,o.kt)("h2",{id:"definici\xf3n-de-tipos"},"Definici\xf3n de tipos"),(0,o.kt)("p",null,"Cuando hacemos uso del tipado en modo ",(0,o.kt)("inlineCode",{parentName:"p"},"strict")," de TypeScript, nos pedir\xe1 que le asignemos a todo un tipo espec\xedfico. Ac\xe1 exploraremos algunos casos espec\xedficos. "),(0,o.kt)("h3",{id:"tipos-para-librer\xedas-de-terceros"},"Tipos para librer\xedas de terceros"),(0,o.kt)("p",null,"TypeScript nos pedir\xe1 que las librer\xedas que usemos vengan tipadas. En algunos casos estos paquetes ya existen, y se puede resolver agregando el paquete con ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn"),". "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"yarn add -D @types/lodash\n")),(0,o.kt)("p",null,"Y si no existe, debe ser definido como un m\xf3dulo."),(0,o.kt)("h3",{id:"tipos-para-los-argumentos-de-una-funci\xf3n"},"Tipos para los argumentos de una funci\xf3n"),(0,o.kt)("p",null,"Para los argumentos de una funci\xf3n podemos definir los tipos con tipado en l\xednea, o bien con ",(0,o.kt)("em",{parentName:"p"},"interfaces"),". "),(0,o.kt)("h4",{id:"en-linea"},"En linea:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const MyComponent = ({ arg }: { arg: string; }) => {\n    // insert code here\n};\n")),(0,o.kt)("h4",{id:"interfaces"},(0,o.kt)("em",{parentName:"h4"},"Interfaces"),":"),(0,o.kt)("p",null,"Cuando definimos una ",(0,o.kt)("em",{parentName:"p"},"interface"),", esta la asignamos en los argumentos para que se interpreten los tipos de datos:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"interface Props {\n    arg1: string;\n    arg2: number;\n    arg3: boolean;\n};\n\nconst MyComponent = ({ arg1, arg2, arg3 }: Props) => {\n    // your code here\n};\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Sugerencia"),": usa una ",(0,o.kt)("em",{parentName:"p"},"interface")," cuando tengas 3 o m\xe1s props."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Tambi\xe9n podemos tipar los argumentos de una funci\xf3n mediante ",(0,o.kt)("em",{parentName:"p"},"types")," de Typescript. Sin embargo, ",(0,o.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#differences-between-type-aliases-and-interfaces"},"la documentaci\xf3n")," recomienda que ocupemos ",(0,o.kt)("em",{parentName:"p"},"interfaces")," siempre que sea posible.  ")),(0,o.kt)("h3",{id:"tipos-al-usar-el-hook-usestate"},"Tipos al usar el hook ",(0,o.kt)("inlineCode",{parentName:"h3"},"useState")),(0,o.kt)("p",null,"Si queremos que el estado de una variable se actualice con cierta estructura, podemos indicar una ",(0,o.kt)("em",{parentName:"p"},"interface"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const [simulatedLoan, setSimulatedLoan] = useState<Loan>({\n  cae: 0,\n    ...\n  due_date: '',\n  annual_rate_bp: 0,\n});\n")),(0,o.kt)("p",null,"Ac\xe1 se aplicar\xe1 la ",(0,o.kt)("em",{parentName:"p"},"interface")," ",(0,o.kt)("inlineCode",{parentName:"p"},"Loan")," al ",(0,o.kt)("em",{parentName:"p"},"state"),". "),(0,o.kt)("p",null,"En cuanto al ",(0,o.kt)("em",{parentName:"p"},"setter")," de ",(0,o.kt)("inlineCode",{parentName:"p"},"useState"),", si queremos pasarlo como argumento a otra funci\xf3n, debemos entregar sus tipos: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const LoanSimulatorForm = ({\n  setSimulatedLoan,\n}: {\n// highlight-start    \n  setSimulatedLoan: (loan: Loan) => void;\n// highlight-end\n}) => {\n    // your code here\n};\n")),(0,o.kt)("p",null,"Esto significa que ",(0,o.kt)("inlineCode",{parentName:"p"},"setSimulatedLoan")," recibe un argumento tipo ",(0,o.kt)("inlineCode",{parentName:"p"},"Loan")," y retorna ",(0,o.kt)("inlineCode",{parentName:"p"},"void"),", ya que s\xf3lo setea el estado de la variable, sin devolver algo."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Los tipos de las funciones de los hooks de react, se pueden definir tambi\xe9n con tipos espec\xedficos de react. En el ejemplo anterior, se podr\xeda definier el setter mediante ",(0,o.kt)("inlineCode",{parentName:"p"},"setSimulatedLoan: React.Dispatch<React.SetStateAction<Loan>>;"),". Sin embargo, ya no los utilizamos. ")),(0,o.kt)("h3",{id:"tipo-de-un-evento"},"Tipo de un evento"),(0,o.kt)("p",null,"Para los eventos usamos un tipo agn\xf3stico:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"<FormikField\n    ...\n  onChange={(e: { target: { value: string; name: string } }) => {\n    ...\n  }}\n/>\n")),(0,o.kt)("p",null,"Igual que con los hooks, este evento se podr\xeda definir con los tipos de react: ",(0,o.kt)("inlineCode",{parentName:"p"},"e: React.FormEvent<HTMLInputElement>"),". Sin embargo, no los utilizamos para hacerlo agn\xf3stico."),(0,o.kt)("h3",{id:"tipo-de-datos-gen\xe9rico"},"Tipo de datos gen\xe9rico"),(0,o.kt)("p",null,"En algunos casos una funci\xf3n puede recibir diferentes tipos de datos y no sabremos siempre qu\xe9 tipo recibir\xe1, por lo que podemos definir un tipo gen\xe9rico ",(0,o.kt)("inlineCode",{parentName:"p"},"T"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"interface fetchDataProps<T> {\n  onSuccess: (t: T) => void;\n  onError: (t: string) => void;\n}\n\nexport const fetchLoanLimits = async <T>({\n  onSuccess,\n  onError\n}: fetchDataProps<T>) => {\n  // your code here\n}\n")),(0,o.kt)("p",null,"En este ejemplo, definimos una ",(0,o.kt)("inlineCode",{parentName:"p"},"interface")," con un tipo gen\xe9rico ",(0,o.kt)("inlineCode",{parentName:"p"},"T")," que es recibido por la funci\xf3n ",(0,o.kt)("inlineCode",{parentName:"p"},"onSuccess"),"."),(0,o.kt)("p",null,"Al definir la funci\xf3n debemos indicar la interface haciendo referencia al tipo de dato gen\xe9rico ",(0,o.kt)("inlineCode",{parentName:"p"},"fetchDataProps<T>"),"."),(0,o.kt)("h3",{id:"cambiar-la-key-de-un-objeto-tipado"},"Cambiar la key de un objeto tipado"),(0,o.kt)("p",null,"Si queremos actualizar el valor de una ",(0,o.kt)("em",{parentName:"p"},"key"),", ser\xe1 necesario indicar en el tipo de dato de la llave del objeto en cuesti\xf3n, y ser\xe1 necesario indicarlo usando ",(0,o.kt)("inlineCode",{parentName:"p"},"keyof"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"interface Props {\n    ...\n};\n\nconst quoteOnInputChange = (value: string, key: string, values: Props) => {\n  let customValues = { ...values };\n  // highlight-start\n  let customKey = key as keyof Props;\n  // highlight-end\n  customValues[customKey] = value;\n\n  // your code here\n}\n")),(0,o.kt)("h2",{id:"otras-consideraciones"},"Otras consideraciones"),(0,o.kt)("h3",{id:"organizaci\xf3n-de-interfaces"},"Organizaci\xf3n de ",(0,o.kt)("em",{parentName:"h3"},"interfaces")),(0,o.kt)("p",null,"Si vamos a definir una ",(0,o.kt)("em",{parentName:"p"},"interface")," que ser\xe1 reutilizada, la podemos dejar en la carpeta ",(0,o.kt)("inlineCode",{parentName:"p"},"react/types"),". Por ejemplo, en ",(0,o.kt)("inlineCode",{parentName:"p"},"react/types/loan"),", se define la interface ",(0,o.kt)("inlineCode",{parentName:"p"},"Loan")," que se ocupa en m\xfaltiples componentes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"interface Loan {\n    ...\n}\nexport default Loan;\n")),(0,o.kt)("p",null,"Luego, la importamos donde queramos ocuparla:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Loan } from '@/types';\n")),(0,o.kt)("p",null,"Si una ",(0,o.kt)("em",{parentName:"p"},"interface")," la ocuparemos en un solo componente, podemos dejarla definida en el mismo componente. "),(0,o.kt)("h2",{id:"configuraci\xf3n"},"Configuraci\xf3n"),(0,o.kt)("p",null,"La configuraci\xf3n principal la encontramos en ",(0,o.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),". Ah\xed, por ejemplo, seteamos el modo ",(0,o.kt)("inlineCode",{parentName:"p"},"strict")," de Typescript:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"compilerOptions": {\n    ...\n    "strict": true,\n    ...\n}\n')),(0,o.kt)("p",null,"Tambi\xe9n, usamos un linter espec\xedfico para Typescript. En la configuraci\xf3n de ESLint usada por react, (en ",(0,o.kt)("inlineCode",{parentName:"p"},"app/react/.eslintrc.json"),") se escribi\xf3 un ",(0,o.kt)("inlineCode",{parentName:"p"},"overrides")," para que este linter aplique s\xf3lo para archivos con extensi\xf3n ",(0,o.kt)("inlineCode",{parentName:"p"},"ts")," o ",(0,o.kt)("inlineCode",{parentName:"p"},"tsx"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "overrides": [\n      {\n        "files": ["*.{ts,tsx}"],\n        "parser": "@typescript-eslint/parser",\n        "plugins": ["@typescript-eslint"],\n        "extends": ["plugin:@typescript-eslint/recommended"]\n      }\n    ]\n}\n')),(0,o.kt)("h2",{id:"mas-informaci\xf3n"},"Mas informaci\xf3n"),(0,o.kt)("p",null,"Ante cualquier duda, usar la ",(0,o.kt)("a",{parentName:"p",href:"https://google.github.io/styleguide/tsguide.html"},"gu\xeda de estilos de Javascript/Typescript de Google"),"."))}u.isMDXComponent=!0}}]);