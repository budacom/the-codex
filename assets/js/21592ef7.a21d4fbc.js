"use strict";(self.webpackChunkthe_codex_docusaurus=self.webpackChunkthe_codex_docusaurus||[]).push([[622],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(t),m=a,k=d["".concat(l,".").concat(m)]||d[m]||p[m]||s;return t?r.createElement(k,i(i({ref:n},u),{},{components:t})):r.createElement(k,i({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,i=new Array(s);i[0]=d;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var c=2;c<s;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1144:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const s={sidebar_position:2},i="Mocks de API calls",o={unversionedId:"guia-frontend/testing/api-mocks",id:"guia-frontend/testing/api-mocks",title:"Mocks de API calls",description:"Para los mocks de API calls utilizamos la librer\xeda Mock Service Worker que nos permite hacer",source:"@site/docs/guia-frontend/testing/api-mocks.md",sourceDirName:"guia-frontend/testing",slug:"/guia-frontend/testing/api-mocks",permalink:"/the-codex/guia-frontend/testing/api-mocks",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Ubicaci\xf3n de los archivos",permalink:"/the-codex/guia-frontend/testing/file-location"}},l={},c=[{value:"Ejemplo de uso \ud83d\udd0d",id:"ejemplo-de-uso-",level:2},{value:"Definici\xf3n de un mock \ud83c\udfaf",id:"definici\xf3n-de-un-mock-",level:3},{value:"Uso del mock \ud83d\udcdd",id:"uso-del-mock-",level:3}],u={toc:c};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"mocks-de-api-calls"},"Mocks de API calls"),(0,a.kt)("p",null,"Para los mocks de API calls utilizamos la librer\xeda ",(0,a.kt)("a",{parentName:"p",href:"https://mswjs.io/"},"Mock Service Worker")," que nos permite hacer\nmocks de manera universal, que por una parte elimina la necesidad de tener que utilizar un mock para cada librer\xeda\nde request que tengamos y tambi\xe9n simplifica la configuraci\xf3n."),(0,a.kt)("h2",{id:"ejemplo-de-uso-"},"Ejemplo de uso \ud83d\udd0d"),(0,a.kt)("p",null,"En nuestro ejemplo tenemos un componente ",(0,a.kt)("inlineCode",{parentName:"p"},"<NewsBanner />")," que representa un banner que ve el usuario al ingresar\nal sitio web y tiene un bot\xf3n para cerrarlo o para dirigirnos a otra vista. Este componente debe ser presentado\nhasta un m\xe1ximo de 3 veces al usuario:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/features/news-banner/index.tsx"',title:'"src/features/news-banner/index.tsx"'},'const NewsBanner = () => {\n  // ...\n  return (\n    <div>\n      // ...\n      <Button\n        // ...\n        onPress={...}\n        testID="news-banner-close"\n      />\n      <Button\n        // ...\n        onPress={...}\n        testID="news-banner-yes"\n      />\n    </div>\n  );\n};\n')),(0,a.kt)("h3",{id:"definici\xf3n-de-un-mock-"},"Definici\xf3n de un mock \ud83c\udfaf"),(0,a.kt)("p",null,"Se recomienda dejar los mocks de requests en el mismo directorio, en nuestro caso ",(0,a.kt)("inlineCode",{parentName:"p"},"src/mocks"),". Y asimismo, contar con un\narchivo donde tener todos nuestros request handlers, en nuestro caso ",(0,a.kt)("inlineCode",{parentName:"p"},"src/mocks/handlers.js"),"."),(0,a.kt)("p",null,"\u25ba ",(0,a.kt)("strong",{parentName:"p"},"Request handlers")),(0,a.kt)("p",null,"Para el caso de api REST podemos simular cualquier tipo de request ",(0,a.kt)("inlineCode",{parentName:"p"},"rest"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"get"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"post"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"put"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"patch")," o ",(0,a.kt)("inlineCode",{parentName:"p"},"delete"),".\nAl mockear estas requests podremos capturar cualquier solicitud y especificar qu\xe9 respuesta devolver."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/mocks/handlers.js"',title:'"src/mocks/handlers.js"'},'// highlight-start\nimport { rest } from "msw";\n// highlight-end\n\nexport const handlers = [\n  // Handles a POST /login request\n  // highlight-start\n  rest.post("/login", null),\n  // highlight-end\n];\n')),(0,a.kt)("p",null,"\u25ba ",(0,a.kt)("strong",{parentName:"p"},"Response resolver")),(0,a.kt)("p",null,"Para manejar una request capturada, especificamos una response simulada mediante una funci\xf3n. La funci\xf3n que resuelve\nla response puede recibir los siguientes argumentos:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"req"),", informaci\xf3n del request: ",(0,a.kt)("inlineCode",{parentName:"li"},"get"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"post"),", etc.,"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"res"),", para crear el mock de la response,"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ctx"),", un conjunto de funciones para setear: ",(0,a.kt)("inlineCode",{parentName:"li"},"status"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"headers"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"body"),", etc. del mock de la respuesta.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/mocks/handlers.js"',title:'"src/mocks/handlers.js"'},'import { apiBaseUrl } from "@/values/api";\n// highlight-start\nimport { rest } from "msw";\n// highlight-end\n\nexport const handlers = [\n  // Handles a GET /user_metadata request\n  // highlight-start\n  rest.get(`${apiBaseUrl}/user_metadata`, (req, res, ctx) =>\n    res(\n      ctx.json({\n        user_metadata: {\n          value: \'{"count":2}\',\n        },\n      })\n    )\n  ),\n  // highlight-end\n];\n')),(0,a.kt)("h3",{id:"uso-del-mock-"},"Uso del mock \ud83d\udcdd"),(0,a.kt)("p",null,"Si queremos utilizar la respuesta del request previamente definido en ",(0,a.kt)("inlineCode",{parentName:"p"},"src/mocks/handlers.js"),"\ny as\xed validar alg\xfan cambio en el DOM, s\xf3lo es necesario esperar que se renderize el componente\ncon ",(0,a.kt)("inlineCode",{parentName:"p"},"waitFor"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/features/news-banner/__tests__/index.spec.js"',title:'"src/features/news-banner/__tests__/index.spec.js"'},'// ...\n\nconst renderComponent = () =>\n  render(\n    <MockRest>\n      <NewsBanner />\n    </MockRest>\n  );\n\ndescribe("NewsBanner", () => {\n  it("displays when flag is active and user has seen the banner less than 3 times", async () => {\n    const { getByTestId } = renderComponent();\n\n    // highlight-start\n    await waitFor(() => getByTestId("news-banner"));\n\n    expect(getByTestId("news-banner")).toBeTruthy();\n    // highlight-end\n  });\n});\n')),(0,a.kt)("p",null,"Por otra parte, si queremos sobrescribir la respuesta del request lo podemos hacer utilizando\n",(0,a.kt)("inlineCode",{parentName:"p"},"server.use"),". En este caso, para hacer uso del mock utilizamos la funci\xf3n ",(0,a.kt)("inlineCode",{parentName:"p"},"waitForRequest")," para\nesperar la respuesta del request y as\xed validar alg\xfan cambio en el DOM:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/features/news-banner/__tests__/index.spec.js"',title:'"src/features/news-banner/__tests__/index.spec.js"'},'// ...\n\nconst renderComponent = () =>\n  render(\n    <MockRest>\n      <NewsBanner />\n    </MockRest>\n  );\n\nconst sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\ndescribe("NewsBanner", () => {\n  it("does not shows when the user has seen the banner more than 3 times", async () => {\n    // highlight-start\n    server.use(\n      rest.get(`${apiBaseUrl}/user_metadata`, (req, res, ctx) =>\n        res(\n          ctx.json({\n            user_metadata: {\n              value: \'{"count":3}\',\n            },\n          })\n        )\n      )\n    );\n    // highlight-end\n\n    const { queryByTestId } = renderComponent();\n\n    // highlight-start\n    await act(async () => {\n      await waitForRequest("GET", "/user_metadata");\n      await sleep(100);\n    });\n\n    expect(queryByTestId("news-banner")).toBeNull();\n    // highlight-end\n  });\n});\n')),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Al sobreescribir ",(0,a.kt)("inlineCode",{parentName:"p"},"rest.get")," utilizando ",(0,a.kt)("inlineCode",{parentName:"p"},"server.use"),", lo que hacemos es sobreescribir la respuesta por\ndefecto que se encuentra definida en ",(0,a.kt)("inlineCode",{parentName:"p"},"src/mocks/handlers.js"),":"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-js"},"user_metadata: {\n  value: '{\"count\":2}',\n}\n")),(0,a.kt)("p",{parentName:"admonition"},"Y la cambiamos por:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-js"},"user_metadata: {\n  value: '{\"count\":3}',\n}\n"))))}p.isMDXComponent=!0}}]);